<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Mortgage Broker AI Assistance Game</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <meta name="referrer" content="no-referrer">
    
    <!-- Bootstrap CSS (CDN) -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">

    <!-- Custom Styles -->
    <style>
        /* Table Styles */
        table {
            width: 100%;
            border-collapse: collapse;
        }
        table tr {
            border-bottom: solid 2px white;
        }
        table tr:last-child {
            border-bottom: none;
        }
        table th {
            position: relative;
            width: 30%;
            background-color: #7d7d7d;
            color: white;
            text-align: center;
            padding: 10px 0;
        }
        table td {
            width: 70%;
            text-align: center;
            background-color: #eee;
            padding: 10px 0;
        }

        /* Progress Bar Styles (if custom styles are still needed) */
        .progress {
            margin-bottom: 20px;
        }

        /* General Layout */
        .main {
            margin: 20px auto;
            width: 80%;
        }
        #wrap1 {
            display: flex;
            justify-content: flex-start;
        }
        #wrap2 {
            display: flex;
            justify-content: flex-start;
            flex-wrap: wrap;
        }
    </style>
</head>
    <body>
    
    <div class=container>
    <h2 id=title1>Mortgage Broker AI Assistance <small> Helping you to make more money by choosing the right clients</small></h2>
    
    <div id="attention" class="well" style="position: relative;">
        <b>ATTENTION:</b> During the whole experiment, please <b>DO NOT</b> refresh the browser. Otherwise, all data will be lost.
        <!-- Total score container -->
        <div id="total_score_div" style="position: absolute; right: 10px; top: 50%; transform: translateY(-50%); font-weight: bold; font-size: 20px; color: black; display: block;">
            <!-- Score will be displayed here -->
            Total Score: Loading...
        </div>
    </div>
    
    
    <div class=tab-content>
    <div id=home class="tab-pane fade sf-hidden">
    </div>
    <div id=bottom style=display:block>
    <ul class=pager> <li>
    </li> </ul>
    <div class=progress>
    <div id=progressbar1 class="progress-bar progress-bar-striped progress-bar-animated" role=progressbar aria-valuenow=75 aria-valuemin=0 aria-valuemax=100 style=width:0%>0%</div>
    </div>
    </div>
    
    <div id=newdemo1 class="tab-pane fade active in" style=display:block>
    <div class=row>
    <div id=profile class=col-xs-5 style="height: 380px;">
    <h3 id=mortgage align=center>Mortgage Amount: Loading...</h3>
    <h5 id=commission align=center>Commission Amount: Loading...</h5>
    <h5 id=penalty align=center>Max Penalty Amount: Loading...</h5>
    
    <div class="main" id="profile_details" style="display: block;">
        <table id=tab1>
            <tbody><tr>
            <th>Mortgage Term</th>
            <td>Loading...</td>
            </tr>
            <tr>
            <th>Annual Income</th>
            <td>Loading...</td>
            </tr>
            <tr>
            <th>Dependents</th>
            <td>Loading...</td>
            </tr>
            <tr>
            <th>Education</th>
            <td>Loading...</td>
            </tr>
            <tr>
            <th>Self Employed</th>
            <td>Loading...</td>
            </tr>
            <th>Total Assets</th>
            <td>Loading...</td>
            </tr>
        </table>
    </div>
    </div>
    
    <div class=col-xs-7>
    
    
        <div class="container-fluid list-group-item list-group-item-warning" id="user_prediction_region" style="height: 368px;">
            <h3 id="decision-instructions">Loading...</h3>
        
            <p></p>
            <form id="decision" class="container-fluid list-group-item list-group-item-light" style="display: none; height: 240px;">
                <li class="list-group-item list-group-item-light">
                    <div class="form-group">
                        <div style="display: inline-block;">
                            <h4>
                                What is your decision?
                            </h4>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="firstdecision" value="0" id="reject-client">
                            <label class="form-check-label" for="reject-client">Reject Client</label>
                        </div>
        
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="firstdecision" value="1" id="accept-client">
                            <label class="form-check-label" for="accept-client">Accept Client</label>
                        </div>
                    </div>
                </li>
        
                <!-- Buttons and Result Area -->
                <div class="button-result-container" style="display: flex; align-items: center; margin-top: 10px;">
                    <!-- Lock in Choice Button -->
                    <button id="lock-in-choice" type="button" class="btn btn-primary" disabled>Lock in Choice</button>
        
                    <!-- Your Result Area -->
                    <div id="your_result" style="margin-left: 10px; display: none; font-weight: bold;">
                        <!-- Result will be displayed here -->
                    </div>

                    <!-- Show $ added to score -->
                    <div id="show_score" style="margin-left: 10px; display: none; font-weight: bold;">
                        <!-- Score will be displayed here -->
                    </div>
        
                    <!-- Finish and Next Button -->
                    <button id="next-task" type="button" class="btn btn-primary" data-dismiss="modal" style="margin-left: 10px; display: none;">Finish and Next</button>

                </div>
        
                <li id="showanswer_area" class="list-group-item list-group-item-light" style="display: none;">
                </li>
            </form>
        
            <!-- Countdown Timer -->
            <div id="countdown_timer" style="margin-left: 20px; margin-top: 20px; font-size: 20px; text-align: left; font-weight: bold; color: darkred;">
                Loading ...
            </div>
        </div>
</div>

</div> 
    <div id=wrap1 class="container-fluid list-group-item list-group-item-light">
    
        <div id="ai_confidence" style="display: flex; gap: 20px; align-items: center;">
            <!-- AI Prediction Text Box -->
            <div id="ai_text" 
                 style="width: 480px; 
                        height: 270px; 
                        border: 2px solid black; 
                        display: none; 
                        align-items: flex-start; 
                        justify-content: flex-start; 
                        padding: 10px; 
                        background-color: white; 
                        font-size: 14px; 
                        overflow: hidden; 
                        white-space: pre-wrap;">
              <!-- Initially blank -->
            </div>
          
            <!-- AI Video Container -->
            <div id="video_container" 
                 style="width: 480px; 
                        height: 270px; 
                        border: 2px solid black; 
                        display: none; 
                        align-items: center; 
                        justify-content: center; 
                        background-color: white;">
              <!-- Placeholder text or an empty space -->
              <p id="video_placeholder" 
                 style="display: block; 
                        font-size: 14px; 
                        color: gray; 
                        text-align: center;">
                Videobot will make prediction here
              </p>
              <video id="ai_video" width="480" height="270" style="display: none;">
                <source id="video_source" src="" type="video/mp4">
                Your browser does not support the video tag.
              </video>
            </div>
          
            <!-- AI Prediction Buttons -->
            <div id="ai_buttons" 
                 style="display: flex; 
                        flex-direction: column; 
                        gap: 10px; 
                        height: 270px; 
                        width: 100px;">
              <button id="textbot_btn" class="btn btn-primary" style="flex: 1; display: none;">Textbot</button>
              <button id="audiobot_btn" class="btn btn-primary" style="flex: 1; display: none;">Audiobot</button>
              <button id="videobot_btn" class="btn btn-primary" style="flex: 1; display: none;">Videobot</button>
            </div>
          </div>
          
        
          <script>
            // Global variables
            let textbot_text;
            let audiovideobot_text;
            let audiobot_video;
            let videobot_video;
            let text_played = false; // text plays only once because buffer seems to overflow if clicked whcih playing
            let subjects_choice;
            let subjects_time;
            let correct_answer; // Will be set after fetching data
            let commission;
            let penalty; // the actual penalty depending on the choice
            let maxPenalty; // maximum penalty (same value as bankRejectPenalty))
            let bankApprovePenalty; // penalty for rejecting something that later gets approved by the bank
            let bankRejectPenalty; // penalty for approving something that later gets rejected by the bank
            let total_score; // Total score as a string
            let next_challenge;
            let lockInChoiceButton;
            let radioButtons;
            let choiceLocked = true;
            let total_score_new; // Updated total score after each decision
            let participantId;
            let chosenAI = "none"; // AI assistant chosen by the subject. videobot, audiobot, textbot
            let time_limit;
            let maxChallenges = 50; // Maximum number of tasks that can ever be run (used for the progress bar)
            let total_tasks; // Total number of tasks in the experiment
            let ai_choices; // AI choices setup in the 541_cases sheet obtained in fetchData
            let textbot_recommend; // recommendation from the textbot
            let timing_equation; // equation to calculate the time limit
        
            // Timer variables
            let timerElement;
            let timeRemaining;
            let countdownInterval;
        
            // Functions used by AI buttons
            function disableOtherButtons(exceptButtonId) {
                const buttons = ['textbot_btn', 'audiobot_btn', 'videobot_btn'];
                buttons.forEach(function (buttonId) {
                    if (buttonId !== exceptButtonId) {
                        document.getElementById(buttonId).disabled = true;
                    }
                });
            }

            function updateLockInButtonState() {
            // Enable the button only if BOTH conditions are true
                if (!choiceLocked) {
                    for (const radio of radioButtons) {
                        if (radio.checked) {
                            lockInChoiceButton.disabled = false;
                            return;
                        }
                    }
                }
                // Disable button if either condition fails
                lockInChoiceButton.disabled = true;
            }


            function showProfileDetails() {
                const profileDetails = document.getElementById("profile_details");
                profileDetails.style.display = "block"; // Make the container visible
                const decision = document.getElementById("decision");
                decision.style.display = "block"; // Make the decision form visible
                console.log("Profile Details shown. Value of time_limit:", time_limit);
            }
        
            // Timer functions
            function updateTimerDisplay() {
                const minutes = Math.floor(timeRemaining / 60);
                const seconds = timeRemaining % 60;
                timerElement.textContent = `Time Remaining: ${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }
        
            function startCountdown() {
                if (countdownInterval) {
                    clearInterval(countdownInterval);
                }
                countdownInterval = setInterval(() => {
                    if (timeRemaining > 0) {
                        timeRemaining--;
                        updateTimerDisplay();
                    } else {
                        clearInterval(countdownInterval);
                        countdownInterval = null;
                        timerElement.textContent = "Time's up!";
                        // Trigger additional actions here when the timer reaches 0
                        // Show the profile details container
                        showProfileDetails();
                        subjects_time = time_limit; // Set the time to time_limit from query string
                        // Disable the Lock in Choice button
                        lockInChoiceButton.disabled = true;
                        // Disable the radio buttons
                        for (const radio of radioButtons) {
                            radio.disabled = true;
                        }
                        // Show the Finish and Next button and your_result area
                        document.getElementById("next-task").style.display = "inline-block"; // Show the Finish and Next button
                        document.getElementById("your_result").style.display = "inline-block"; // Show the your_result area
                        document.getElementById("show_score").style.display = "inline-block"; // Show the show_score area
                        document.getElementById("your_result").textContent = "Ran out of time!"; // Display the message
                        document.getElementById("show_score").textContent = "Score: -$" + maxPenalty.toLocaleString(); // Display the penalty
                        total_score_new = parseInt(total_score) - maxPenalty; // Deduct the penalty from the total score
                        document.getElementById('total_score_div').textContent = 'Total Score: $' + total_score_new.toLocaleString(); // Update the total score
                    }
                }, 1000); // Update every second
            }
        
            // Function to extract query parameters
            function getQueryParameter(param) {
                var urlParams = new URLSearchParams(window.location.search);
                return urlParams.get(param);
            }

            // function to store the completed task data in google sheets
            function storeCompletedTaskData() {
                // log the variables to the console
                console.log("TaskComplete: Participant ID:", participantId);
                console.log("TaskComplete: Total Score:", total_score_new);
                console.log("TaskComplete: Correct Answer:", correct_answer);
                console.log("TaskComplete: Subject's Choice:", subjects_choice);
                console.log("TaskComplete: Time Spent:", subjects_time);
                console.log("TaskComplete: Chosen AI:", chosenAI);
        
                // Construct the URL for the Google Apps Script
                const scriptUrl = "https://script.google.com/macros/s/AKfycbyX6EXj-GAsdqOPRhjF5hCTFZZtbqi_OD4AY9yJsn5Vt1kUzqOoczPbXMMhAAhtIMwmrg/exec";

                // Assemble Query String entries as strings based on post pending next_challenge to the variable names
                let qs1 = `?score${next_challenge}=${total_score_new}`;
                let qs2 = `&bank${next_challenge}=${correct_answer}`;
                let qs3 = `&choice${next_challenge}=${subjects_choice}`;
                let qs4 = `&time${next_challenge}=${subjects_time}`;
                let qs5 = `&AI${next_challenge}=${chosenAI}`;
                let qs6 = `&participantId=${participantId}`;
                
                let queryString = qs1 + qs2 + qs3 + qs4 + qs5 + qs6;
                console.log("queryString: ", queryString);   

                // Send a GET request to the Google Apps Script
                fetch(scriptUrl + queryString, {
                    method: 'GET',
                })
                    .then((result) => result.text())
                    .then((text) => {
                        console.log('Server Response:', text);
                        alert('Task data submitted successfully!');
                    })
                    .catch((error) => {
                        console.error('Error submitting task data:', error);
                        alert('An error occurred. Please try again.');
                    });
            }
            // function to get the time limit
            // if the time_limit parameter is set with the querystring, use that value
            // otherwise get it from the google sheet by calling an app script described below
            async function getTimeLimit() {
                let time_limit = getQueryParameter('time_limit');
                if (time_limit) {
                    console.log('Using time limit from query string:', time_limit);
                    return parseInt(time_limit);
                } else {
                    //parse the timing equation. It's a string of the form <base time>(optional)+<time adder>(optional)
                    //if neither is present, default to 180
                    //base time is an integer. time adder is a string that corresponds to a column in the timing_equation sheet
                    let base_time = 0;
                    let time_adder = "";
                    let time_adder_value = 0;
                    let time_limit = 180;
                    if (timing_equation.includes("+")) {
                        let equation_parts = timing_equation.split("+");
                        base_time = parseInt(equation_parts[0]);
                        time_adder = equation_parts[1];
                    } else {
                        //figure out whether the timing equation is just a number
                        if (timing_equation.match(/^\d+$/)) {
                            base_time = parseInt(timing_equation);
                        }
                        else
                        {
                            time_adder = timing_equation;
                        }
                    }
                    //if there is a time adder, get the value from the google sheet
                    if (time_adder) {
                        // determine which values to extract for time_adder.
                        // time adder is a string that corresponds to a math function and range of values in the Experimental Data sheet
                        // of the form <math function>(<range>)
                        // possible ranges at the moment are 2-8 and 10-16, but in the future this could be expanded
                        // at the moment, the math functions are "median" and "mean"
                        let math_function = "";
                        let range = "";
                        if (time_adder.includes("(") && time_adder.includes(")")) {
                            let parts = time_adder.split("(");
                            math_function = parts[0];
                            range = parts[1].replace(")", "");
                        }
                        console.log('Math Function:', math_function);
                        console.log('Range:', range);
                        // assemble the query string to extract the range of values
                        // for a row defined by participantId, and columns defined by the string time<range>
                        // first step, determine how many columns must be extracted
                        let range_parts = range.split("-");
                        let start_range = parseInt(range_parts[0]);
                        let end_range = parseInt(range_parts[1]);
                        let num_columns = end_range - start_range + 1;
                        console.log('Start Range:', start_range);
                        console.log('End Range:', end_range);
                        console.log('Num Columns:', num_columns);
                        // assemble the query string, including participantId, range of columns and the math function
                        let queryString = `?participantId=${participantId}&start_range=${start_range}&num_columns=${num_columns}&math_function=${math_function}`;
                        console.log('getTimeLimit queryString:', queryString);
                        // fetch the data from the google sheet
                        const scriptUrl = "https://script.google.com/macros/s/AKfycbxTYAYpOVWmi6FV0fKlQDbYrT5cNDgSN7BPyEobbi0CxqdN9CpJNGhpyCH1_ESdYaJLrQ/exec";
                        try {
                            const response = await fetch(scriptUrl + queryString, {
                                method: 'GET',
                            });
                            const data = await response.text(); // Treat response as plain text
                            console.log('Raw Server Response:', data);
                            // Parse the response as a number
                            time_adder_value = parseInt(data);
                            if (isNaN(time_adder_value)) {
                                throw new Error('Server returned invalid time adder value');
                            }
                            console.log('Time Adder Value:', time_adder_value);
                        } catch (error) {
                            console.error('Error fetching time adder value:', error);
                            return 180; // Default to 180 seconds if an error occurs
                        }
                    }
                    console.log('Base Time:', base_time);
                    console.log('Time Adder:', time_adder);
                    console.log('Time Adder Value:', time_adder_value);
                    time_limit = base_time + time_adder_value;
                    // time_limit cannot be less than 15 seconds
                    if (time_limit < 15) {
                        time_limit = 15;
                    }
                    console.log('Time Limit:', time_limit);
                    return time_limit;
                }
            }

            // function to add an effect that makes it look like an AI is generating the response
            function generateWithDelay(container, delay, callback) {
                console.log('generateWithDelay called with delay:', delay);

                if (delay === 0) {
                    console.log('Delay is 0, skipping "Generating..." and calling callback immediately.');
                    callback();
                    return;
                }

                // Log that "Generating..." is being added

                const generatingText = document.createElement("div");
                generatingText.id = "generatingText";
                generatingText.textContent = "Generating";
                container.appendChild(generatingText);

                let dotCount = 0;

                // Add moving dots
                const dotInterval = setInterval(() => {
                    generatingText.textContent = "Generating" + ".".repeat(dotCount % 4);
                    dotCount++;
                }, 500); // Dots appear at a rate of 2 per second

                // Stop the animation after the delay and invoke the callback
                setTimeout(() => {
                    clearInterval(dotInterval); // Stop the moving dots
                    generatingText.remove(); // Remove the "Generating..." text
                    callback(); // Invoke the callback after the delay
                }, delay);
            }



            // Function to fetch data from Google Apps Script
            function fetchData() {

                console.log('fetchData function is called.');

                var scriptURL = 'https://script.google.com/macros/s/AKfycbx_iZvLfmu3-DPt0UrXSg-Ytpejk1hxaT7OaJVVA7YOUMbG1b9UVoIdXyRPGXiExOXu/exec';
        
                fetch(scriptURL + '?next_challenge=' + next_challenge)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not OK');
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('before error check: Data received:', data);
                        
        
                        if (data.error) {
                            throw new Error(data.error);
                        }
                        console.log('after error check: Data received:', data);

                        textbot_text = data['text_pred'];
                        // audiovideobot_text = data['av_pred']; // no need to fetch for this version, text display diasabled in the video and audio button handlers
                        
                        textbot_recommend = data['text_recom'];

                        audiobot_video = "https://vancuvrboy.github.io/CPEN541/" + data['audio_url']; // no need to fetch for this version
                        videobot_video = "https://vancuvrboy.github.io/CPEN541/" + data['video_url'];

                        // Update the Mortgage Amount
                        document.getElementById('mortgage').textContent = 'Mortgage Amount: $' + data['Mortgage'].toLocaleString();

                        // calculate commission (1% of mortgage amount)
                        commission = Math.round(data['Mortgage'] * 0.01);
                        // Update the commission
                        document.getElementById('commission').textContent = 'Commission Amount: +$' + commission.toLocaleString();


                        // calculate the penalty for rejecting something that later gets approved by the bank (0.4%)
                        bankApprovePenalty = Math.round(data['Mortgage'] * 0.004);

                        // calculate the penalty for approving something that later gets rejected by the bank (0.6%)
                        bankRejectPenalty = Math.round(data['Mortgage'] * 0.006);
                        maxPenalty = bankRejectPenalty;

                        // Update the penalty
                        document.getElementById('penalty').textContent = 'Max Penalty Amount: -$' + maxPenalty.toLocaleString();

                        // Update the table of attributes
                        var tableBody = document.querySelector('#tab1 tbody');
                        tableBody.innerHTML = `
                            <tr>
                                <th>Mortgage Term</th>
                                <td>${data['Term']} Years</td>
                            </tr>
                            <tr>
                                <th>Annual Income</th>
                                <td>$${data['Income'].toLocaleString()}</td>
                            </tr>
                            <tr>
                                <th>Dependents</th>
                                <td>${data['Dependents']}</td>
                            </tr>
                            <tr>
                                <th>Education</th>
                                <td>${data['Education']}</td>
                            </tr>
                            <tr>
                                <th>Self Employed</th>
                                <td>${data['SEmployed']}</td>
                            </tr>
                            <tr>
                                <th>Total Assets</th>
                                <td>$${data['Assets'].toLocaleString()}</td>
                            </tr>
                        `;
        
                        // Set the correct_answer variable
                        correct_answer = data['Approved'].toString();
                        console.log('Correct Answer:', correct_answer);

                        // enable components of the interface depending on the value of ai_choices
                        // get the AI choices
                        ai_choices = data['ai_choices'];
                        console.log('AI Choices:', ai_choices);

                        timing_equation=data['timing_equation'];
                        
                        return getTimeLimit();
                    })
                    .then(fetched_time_limit => {
                        // Set the time limit
                        console.log('Fetched time_limit:', fetched_time_limit);
        
                        // Initialize the timer
                        time_limit = fetched_time_limit;
                        timeRemaining = time_limit; // 3 minutes in seconds is default

        
                        // Start the countdown timer
                        updateTimerDisplay();
                        startCountdown();
                        choiceLocked = false; // Enable the choice lock button
                        updateLockInButtonState(); // Update button based on new state

                        // enable the buttons based on the ai_choices
                        const textDecision = document.getElementById("decision-instructions");
                        // if aichoices includes the string video, enable the videobot button and show the video container and placeholder
                        if (ai_choices.includes("video")) {
                            document.getElementById("videobot_btn").style.display = "inline-block";
                            document.getElementById("video_container").style.display = "flex";
                            document.getElementById("video_placeholder").style.display = "block";
                            textDecision.textContent = "Start your AI assistant, then make your decision";
                        }
                        // if aichoices includes the string audio, enable the audiobot button and show the video container and placeholder
                        if (ai_choices.includes("audio")) {
                            document.getElementById("audiobot_btn").style.display = "inline-block";
                            document.getElementById("video_container").style.display = "flex";
                            document.getElementById("video_placeholder").style.display = "block";
                            textDecision.textContent = "Start your AI assistant, then make your decision";
                        }
                        // if aichoices includes the string text, enable the textbot button and show the text container
                        if (ai_choices.includes("text")) {
                            document.getElementById("textbot_btn").style.display = "inline-block";
                            document.getElementById("ai_text").style.display = "block";
                            textDecision.textContent = "Start your AI assistant, then make your decision";
                        }
                        // if ai_choices = none or is blank then show the profile details container
                        if (ai_choices == "none" || ai_choices == "") {
                            showProfileDetails();
                            textDecision.textContent = "Make your decision";
                        }
                        console.log('Bots Shown, Time Limit:', time_limit);

                    })
                    .catch(error => {
                        console.error('Error fetching data:', error);
                        document.getElementById('progress-text').textContent = 'Error loading data';
        
                        // Display the error message on the page
                        let errorMessageElement = document.getElementById('error-message');
                        if (errorMessageElement) {
                            errorMessageElement.textContent = error.message;
                        } else {
                            errorMessageElement = document.createElement('div');
                            errorMessageElement.id = 'error-message';
                            errorMessageElement.style.color = 'red';
                            errorMessageElement.textContent = error.message;
                            document.getElementById('progress-text').insertAdjacentElement('afterend', errorMessageElement);
                        }
                    });
            }

            // Function to handle page load events
            function pageloadEvents() {
                total_score = getQueryParameter('total_score') || '0'; // Default to '0' if not provided
                // update & display total score
                document.getElementById('total_score_div').textContent = 'Total Score: $' + parseInt(total_score).toLocaleString();
                next_challenge = getQueryParameter('next_challenge') || '1';
                
                // get total_tasks from the query string
                total_tasks = getQueryParameter('total_tasks') || '25'; // Default to '25' if not provided

                // Calculate the progress percentage
                // Ensure next_challenge is between 1 and maxChallenges
                const challengeValue = Math.min(Math.max(next_challenge, 1), maxChallenges);
                const progressPercentage = (challengeValue / total_tasks) * 100;

                // Update the progress bar width and text
                const progressBar = document.getElementById('progressbar1');
                progressBar.style.width = `${progressPercentage}%`;
                progressBar.setAttribute('aria-valuenow', progressPercentage.toFixed(0));
                progressBar.innerText = `${progressPercentage.toFixed(0)}%`;
                // get participantId from the query string
                participantId = getQueryParameter('participantId') || 'P1234'; // Default to 'P1234' if not provided
                console.log('New Page: Participant ID:', participantId);
                console.log('New Page: Total Score:', total_score);
                console.log('New Page: Next Challenge:', next_challenge);

            }

            document.addEventListener('DOMContentLoaded', pageloadEvents);
        
            document.addEventListener("DOMContentLoaded", function () {
                // Now that DOM is loaded, we can access DOM elements
                lockInChoiceButton = document.getElementById("lock-in-choice");
                radioButtons = document.getElementsByName('firstdecision');
                // Assign DOM elements
                timerElement = document.getElementById("countdown_timer");

                // Initially update button state
                updateLockInButtonState();
        
                // Add event listeners to radio buttons
                for (const radio of radioButtons) {
                    radio.addEventListener('change', updateLockInButtonState);
                }

                //checkRadioSelection(); // Check initial state when DOM is loaded

                // next-task button click handler
                document.getElementById("next-task").addEventListener("click", function () {
                    // Redirect to the next challenge
                    // log the variables to the console
                    storeCompletedTaskData();
                    // redirect to the next challenge, unless you have just completed challenges 8, 16, or 25
                    // if it is challenge 8, pop up an alert
                    // if it is challenge 16, pop up an alert
                    // if it is 25, then redirect to final page

                    if (parseInt(next_challenge) == 8) {
                        alert("You have finished 8 tasks. In the next 8 tasks you will be able to get help from two different AIs. In this case, before you are able to accept or reject a client, you must push the button beside the AI to activate it. You need to decide if you trust the AI recommendation or not.");
                        window.location.href = `https://vancuvrboy.github.io/CPEN541/task.htm?participantId=${participantId}&total_score=${total_score_new}&next_challenge=9&total_tasks=25`;
                    } else if (parseInt(next_challenge) == 16) {
                        alert("You have finished 16 tasks. In the following 9 tasks you will have help from the same two AIs. But this time, you will have to decide which AI to trust for each task. Again you must activate one of the AIs before you can accept or reject a client.");
                        window.location.href = `https://vancuvrboy.github.io/CPEN541/task.htm?participantId=${participantId}&total_score=${total_score_new}&next_challenge=17&total_tasks=25`;
                    } else if (parseInt(next_challenge) == 25) {
                        alert("You have completed all your tasks! Now we'd like to ask a few questions before you see how you did against other participants.");
                        window.location.href = `https://vancuvrboy.github.io/CPEN541/survey.htm?participantId=${participantId}&total_score=${total_score_new}`;
                    } else {
                        window.location.href = `https://vancuvrboy.github.io/CPEN541/task.htm?participantId=${participantId}&total_score=${total_score_new}&next_challenge=${parseInt(next_challenge) + 1}&total_tasks=25`;
                    }
                });
        
                // Handle Lock in Choice button click
                lockInChoiceButton.addEventListener("click", function () {
                    if (choiceLocked) {
                        return;
                    }
                    choiceLocked = true;
        
                    // Stop the countdown timer
                    clearInterval(countdownInterval);
                    countdownInterval = null;
        
                    // Record the value of the radio buttons
                    subjects_choice = undefined;
                    for (const radio of radioButtons) {
                        if (radio.checked) {
                            subjects_choice = radio.value;
                            break;
                        }
                    }
        
                    if (subjects_choice === undefined) {
                        alert("Please make a selection before locking in your choice.");
                        return;
                    }

                    console.log("Lock in Choice clicked: Subject's Choice:", subjects_choice);

                    // record the time it took the subject to click the lock in choice button
                    console.log("time_limit after choice locked in:", time_limit);
                    subjects_time = time_limit - timeRemaining;
        
                    // Disable the Lock in Choice button
                    lockInChoiceButton.disabled = true;
        
                    // Disable the radio buttons
                    for (const radio of radioButtons) {
                        radio.disabled = true;
                    }
        
                    // Show the Finish and Next button and your_result area
                    document.getElementById("next-task").style.display = "inline-block";
                    document.getElementById("your_result").style.display = "inline-block";
                    document.getElementById("show_score").style.display = "inline-block";

                    // Compare subjects_choice with correct_answer
                    if (subjects_choice === correct_answer) {
                        document.getElementById("your_result").textContent = "The bank and you agree!";
                        // if the choice was accepted, add the commission to the score
                        if (subjects_choice == 1) {
                            document.getElementById("show_score").textContent = "Score: +$" + commission.toLocaleString();
                            // update the total score
                            total_score_new = parseInt(total_score) + commission;
                            document.getElementById('total_score_div').textContent = 'Total Score: $' + total_score_new.toLocaleString();
                        }
                        // if the choice was rejected, then add 0 to the score
                        else {
                            document.getElementById("show_score").textContent = "Score: +$0";
                            total_score_new = parseInt(total_score);
                        }
                    } else {
                        if (subjects_choice == 1) {
                            penalty = bankRejectPenalty;
                        } else {
                            penalty = bankApprovePenalty;
                        }
                        document.getElementById("your_result").textContent = "The bank and you don't agree!";
                        // if you are wrong, deduct the penalty from the score
                        document.getElementById("show_score").textContent = "Score: -$" + penalty.toLocaleString();
                        // update the total score
                        total_score_new = parseInt(total_score) - penalty;
                        document.getElementById('total_score_div').textContent = 'Total Score: $' + total_score_new.toLocaleString();
                    }
        
                    // Optionally, store subjects_choice and subjects_time for further processing
                    console.log("F&N shown: Subject's Choice:", subjects_choice);
                    console.log("F&N shown: Time Spent:", subjects_time);
                    console.log("F&N shown: Participant ID:", participantId);
                    console.log("F&N shown: Total Score:", total_score_new);
                    console.log("F&N shown: Next Challenge:", parseInt(next_challenge) + 1);
                });
        
                // AI Button Event Listeners
        
                // Textbot button click handler
                document.getElementById("textbot_btn").addEventListener("click", function () {
                    // Disable other buttons
                    disableOtherButtons('textbot_btn');
        
                    // Show the profile details container
                    showProfileDetails();

                    // set chosenAI to textbot
                    chosenAI = "textbot";
        
                    // Hide the video and show placeholder
                    const placeholder = document.getElementById("video_placeholder");
                    placeholder.style.display = "block"; // Show placeholder
                    const video = document.getElementById("ai_video");
                    video.style.display = "none"; // Hide video
                    video.pause(); // Stop video if playing
        
                    // Clear and start typing the text from textbot_text
                    const aiText = document.getElementById("ai_text");
        
                    // Typing effect logic
                    let index = 0; // Track the index of the current character in textbot_text
                    let typingStage = 0; // Track which part of the text is being typed
                    let firstDelay = 3000; // Delay before typing the first block
                    let secondDelay = 5000; // Delay before typing the second block
                    let typingSpeed = 15; // Adjust typing speed here

                    function typeCharacter() {
                        if (typingStage === 0) {
                            // Typing from textbot_recommend
                            if (index < textbot_recommend.length) {
                                aiText.textContent += textbot_recommend[index];
                                index++;
                                setTimeout(typeCharacter, typingSpeed); // Adjust typing speed here
                            } else {
                                typingStage = 1; // Move to the next stage
                                index = 0; // Reset index for textbot_text
                                // Delay with "Generating..." before the second text
                                generateWithDelay(aiText, secondDelay, () => {
                                    aiText.textContent += "\n\n"; // Add line feed
                                    typeCharacter(); // Start typing the second block
                                });
                            }
                        } else if (typingStage === 1) {
                            // Typing from textbot_text
                            if (index < textbot_text.length) {
                                aiText.textContent += textbot_text[index];
                                index++;
                                setTimeout(typeCharacter, typingSpeed); // Adjust typing speed here
                            }
                        }
                    }


                    if (!text_played) {
                        aiText.textContent = ""; // Clear the text box before typing
                        generateWithDelay(aiText, 3000, () => {
                            typeCharacter(); // Start typing the first block
                        });
                        text_played = true; // Ensure this logic only runs once
                    }

                });
        
                // Audiobot button click handler
                document.getElementById("audiobot_btn").addEventListener("click", function () {
                    // Disable other buttons
                    disableOtherButtons('audiobot_btn');
        
                    // Show the profile details container
                    showProfileDetails();

                    // set chosenAI to audiobot
                    chosenAI = "audiobot";
        
                    // Hide the placeholder text
                    const placeholder = document.getElementById("video_placeholder");
                    placeholder.style.display = "none";
        
                    // Update the video source to audiobot_video
                    const video = document.getElementById("ai_video");
                    const videoSource = document.getElementById("video_source");
                    videoSource.src = audiobot_video; // Set video source
                    video.load(); // Reload the video with the new source
                    video.style.display = "block"; // Show video
                    video.controls = false; // Ensure controls are disabled
                    video.play(); // Play the video
        
                    // Clear and start typing the text from audiovideobot_text
                    const aiText = document.getElementById("ai_text");
        
                    // Typing effect logic
                    let index = 0;
                    function typeCharacter() {
                        if (index < audiovideobot_text.length) {
                            aiText.textContent += audiovideobot_text[index];
                            index++;
                            setTimeout(typeCharacter, 20); // Adjust typing speed here
                        }
                    }
                    //if (!text_played) {
                        //aiText.textContent = ""; // Clear the text box before typing
                        //typeCharacter(); // Start the typing effect
                        //text_played = true;
                    //}
                });
        
                // Videobot button click handler
                document.getElementById("videobot_btn").addEventListener("click", function () {
                    // Disable other buttons
                    disableOtherButtons('videobot_btn');
        
                    // Show the profile details container
                    showProfileDetails();

                    // set chosenAI to videobot
                    chosenAI = "videobot";
        
                    // Hide the placeholder text
                    const placeholder = document.getElementById("video_placeholder");
                    placeholder.style.display = "none";
        
                    // Update the video source to videobot_video
                    const video = document.getElementById("ai_video");
                    const videoSource = document.getElementById("video_source");
                    videoSource.src = videobot_video; // Set video source
                    video.load(); // Reload the video with the new source
                    video.style.display = "block"; // Show video
                    video.controls = false; // Ensure controls are disabled
                    video.play(); // Play the video
        
                    // Clear and start typing the text from audiovideobot_text
                    const aiText = document.getElementById("ai_text");

        
                    // Typing effect logic
                    let index = 0;
                    function typeCharacter() {
                        if (index < audiovideobot_text.length) {
                            aiText.textContent += audiovideobot_text[index];
                            index++;
                            setTimeout(typeCharacter, 20); // Adjust typing speed here
                        }
                    }
                    //if (!text_played) {
                        //aiText.textContent = ""; // Clear the text box before typing
                        //typeCharacter(); // Start the typing effect
                        //text_played = true;
                    //}
                });
        
                console.log('DOMContentLoaded event listener is called.');
                console.log('before fetchdata: Next Challenge:', next_challenge);
                console.log('before fetchdata: Total Score:', total_score);
                console.log('before fetchdata: Participant ID:', participantId);
                // Call fetchData after DOM is ready and elements are assigned
                fetchData();
            });
        </script>
    </div>
</div>
</div>

    </body></html>
   